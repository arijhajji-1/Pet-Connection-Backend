// The following definitions have been copied (almost) as-is from:
// https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/hapi__joi
//
// Note: This file is expected to change dramatically in the next major release and have been
// imported here to make migrating back to the "joi" module name simpler. It include known bugs
// and other issues. It does not include some new features included in version 17.2.0 or newer.
//
// TypeScript Version: 2.8

// TODO express type of Schema in a type-parameter (.default, .valid, .example etc)

declare namespace Joi {
    type Types =
        | 'any'
        | 'alternatives'
        | 'array'
        | 'boolean'
        | 'binary'
        | 'date'
        | 'function'
        | 'link'
        | 'number'
        | 'object'
        | 'string'
        | 'symbol';

    type BasicType = boolean | number | string | any[] | object | null;

    type LanguageMessages = Record<string, string>;

    type PresenceMode = 'optional' | 'required' | 'forbidden';

    interface ErrorFormattingOptions {
        /**
         * when true, error message templates will escape special characters to HTML entities, for security purposes.
         *
         * @default false
         */
        escapeHtml?: boolean;
        /**
         * defines the value used to set the label context variable.
         */
        label?: 'path' | 'key' | false;
        /**
         * The preferred language code for error messages.
         * The value is matched against keys at the root of the messages object, and then the error code as a child key of that.
         * Can be a reference to the value, global context, or local context which is the root value passed to the validation function.
         *
         * Note that references to the value are usually not what you want as they move around the value structure relative to where the error happens.
         * Instead, either use the global context, or the absolute value (e.g. `Joi.ref('/variable')`)
         */
        language?: keyof LanguageMessages;
        /**
         * when false, skips rendering error templates. Useful when error messages are generated elsewhere to save processing time.
         *
         * @default true
         */
        render?: boolean;
        /**
         * when true, the main error will possess a stack trace, otherwise it will be disabled.
         * Defaults to false for performances reasons. Has no effect on platforms other than V8/node.js as it uses the Stack trace API.
         *
         * @default false
         */
        stack?: boolean;
        /**
         * overrides the way values are wrapped (e.g. `[]` around arrays, `""` around labels).
         * Each key can be set to a string with one (same character before and after the value) or two characters (first character
         * before and second character after), or `false` to disable wrapping.
         */
        wrap?: {
            /**
             * the characters used around `{#label}` references. Defaults to `'"'`.
             *
             * @default '"'
             */
            label?: string | false,

            /**
             * the characters used around array values. Defaults to `'[]'`
             *
             * @default '[]'
             */
            array?: string | false

            /**
             * the characters used around array string values. Defaults to no wrapping.
             *
             * @default false
             */
            string?: string | false
        };
    }

    interface BaseValidationOptions {
        /**
         * when true, stops validation on the first error, otherwise returns all the errors found.
         *
         * @default true
         */
        abortEarly?: boolean;
        /**
         * when true, allows object to contain unknown keys which are ignored.
         *
         * @default false
         */
        allowUnknown?: boolean;
        /**
         * when true, return artifacts alongside the value.
         *
         * @default false
         */
        artifacts?: boolean;
        /**
         * when true, schema caching is enabled (for schemas with explicit caching rules).
         *
         * @default false
         */
        cache?: boolean;
        /**
         * provides an external data set to be used in references
         */
        context?: Context;
        /**
         * when true, attempts to cast values to the required types (e.g. a string to a number).
         *
         * @default true
         */
        convert?: boolean;
        /**
         * sets the string format used when converting dates to strings in error messages and casting.
         *
         * @default 'iso'
         */
        dateFormat?: 'date' | 'iso' | 'string' | 'time' | 'utc';
        /**
         * when true, valid results and throw errors are decorated with a debug property which includes an array of the validation steps used to generate the returned result.
         *
         * @default false
         */
        debug?: boolean;
        /**
         * error formatting settings.
         */
        errors?: ErrorFormattingOptions;
        /**
         * if false, the external rules set with `any.external()` are ignored, which is required to ignore any external validations in synchronous mode (or an exception is thrown).
         *
         * @default true
         */
        externals?: boolean;
        /**
         * when true, do not apply default values.
         *
         * @default false
         */
        noDefaults?: boolean;
        /**
         * when true, inputs are shallow cloned to include non-enumerable properties.
         *
         * @default false
         */
        nonEnumerables?: boolean;
        /**
         * sets the default presence requirements. Supported modes: 'optional', 'required', and 'forbidden'.
         *
         * @default 'optional'
         */
        presence?: PresenceMode;
        /**
         * when true, ignores unknown keys with a function value.
         *
         * @default false
         */
        skipFunctions?: boolean;
        /**
         * remove unknown elements from objects and arrays.
         * - when true, all unknown elements will be removed
         * - when an object:
         *      - objects - set to true to remove unknown keys from objects
         *
         * @default false
         */
        stripUnknown?: boolean | { arrays?: boolean; objects?: boolean };
    }

    interface ValidationOptions extends BaseValidationOptions {
        /**
         * overrides individual error messages. Defaults to no override (`{}`).
         * Messages use the same rules as templates.
         * Variables in double braces `{{var}}` are HTML escaped if the option `errors.escapeHtml` is set to true.
         *
         * @default {}
         */
        messages?: LanguageMessages;
    }

    interface AsyncValidationOptions extends ValidationOptions {
        /**
         * when true, artifacts are returned alongside the value (i.e. `{ value, artifacts }`)
         *
         * @default false
         */
        artifacts?: boolean;
        /**
         * when true, warnings are returned alongside the value (i.e. `{ value, warning }`).
         *
         * @default false
         */
        warnings?: boolean;
    }

    interface LanguageMessageTemplate {
        source: string;
        rendered: string;
    }

    interface ErrorValidationOptions extends BaseValidationOptions {
        messages?: Record<string, LanguageMessageTemplate>;
    }

    interface RenameOptions {
        /**
         * if true, does not delete the old key name, keeping both the new and old keys in place.
         *
         * @default false
         */
        alias?: boolean;
        /**
         * if true, allows renaming multiple keys to the same destination where the last rename wins.
         *
         * @default false
         */
        multiple?: boolean;
        /**
         * if true, allows renaming a key over an existing key.
         *
         * @default false
         */
        override?: boolean;
        /**
         * if true, skip renaming of a key if it's undefined.
         *
         * @default false
         */
        ignoreUndefined?: boolean;
    }

    interface TopLevelDomainOptions {
        /**
         * - `true` to use the IANA list of registered TLDs. This is the default value.
         * - `false` to allow any TLD not listed in the `deny` list, if present.
         * - A `Set` or array of the allowed TLDs. Cannot be used together with `deny`.
         */
        allow?: Set<string> | string[] | boolean;
        /**
         * - A `Set` or array of the forbidden TLDs. Cannot be used together with a custom `allow` list.
         */
        deny?: Set<string> | string[];
    }

    interface HierarchySeparatorOptions {
        /**
         * overrides the default `.` hierarchy separator. Set to false to treat the key as a literal value.
         *
         * @default '.'
         */
        separator?: string | false;
    }

    interface DependencyOptions extends HierarchySeparatorOptions {
        /**
         * overrides the default check for a present value.
         *
         * @default (resolved) => resolved !== undefined
         */
        isPresent?: (resolved: any) => boolean;
    }

    interface EmailOptions {
        /**
         * if `true`, domains ending with a `.` character are permitted
         *
         * @default false
         */
        allowFullyQualified?: boolean;
        /**
         * If `true`, Unicode characters are permitted
         *
         * @default true
         */
        allowUnicode?: boolean;
        /**
         * if `true`, ignore invalid email length errors.
         *
         * @default false
         */
        ignoreLength?: boolean;
        /**
         * if true, allows multiple email addresses in a single string, separated by , or the separator characters.
         *
         * @default false
         */
        multiple?: boolean;
        /**
         * when multiple is true, overrides the default , separator. String can be a single character or multiple separator characters.
         *
         * @default ','
         */
        separator?: string | string[];
        /**
         * Options for TLD (top level domain) validation. By default, the TLD must be a valid name listed on the [IANA registry](http://data.iana.org/TLD/tlds-alpha-by-domain.txt)
         *
         * @default { allow: true }
         */
        tlds?: TopLevelDomainOptions | false;
        /**
         * Number of segments required for the domain. Be careful since some domains, such as `io`, directly allow email.
         *
         * @default 2
         */
        minDomainSegments?: number;
        /**
         * The maximum number of domain segments (e.g. `x.y.z` has 3 segments) allowed. Defaults to no limit.
         *
         * @default Infinity
         */
        maxDomainSegments?: number;
    }

    interface DomainOptions {
        /**
         * if `true`, domains ending with a `.` character are permitted
         *
         * @default false
         */
        allowFullyQualified?: boolean;
        /**
         * If `true`, Unicode characters are permitted
         *
         * @default true
         */
        allowUnicode?: boolean;

        /**
         * Options for TLD (top level domain) validation. By default, the TLD must be a valid name listed on the [IANA registry](http://data.iana.org/TLD/tlds-alpha-by-domain.txt)
         *
         * @default { allow: true }
         */
        tlds?: TopLevelDomainOptions | false;
        /**
         * Number of segments required for the domain.
         *
         * @default 2
         */
        minDomainSegments?: number;
        /**
         * The maximum number of domain segments (e.g. `x.y.z` has 3 segments) allowed. Defaults to no limit.
         *
         * @default Infinity
         */
        maxDomainSegments?: number;
    }

    interface HexOptions {
        /**
         * hex decoded representation must be byte aligned.
         * @default false
         */
        byteAligned?: boolean;
    }

    interface IpOptions {
        /**
         * One or more IP address versions to validate against. Valid values: ipv4, ipv6, ipvfuture
         */
        version?: string | string[];
        /**
         * Used to determine if a CIDR is allowed or not. Valid values: optional, required, forbidden
         */
        cidr?: PresenceMode;
    }

    type GuidVersions = 'uuidv1' | 'uuidv2' | 'uuidv3' | 'uuidv4' | 'uuidv5';

    interface GuidOptions {
        version?: GuidVersions[] | GuidVersions;
        separator?: boolean | '-' | ':';
    }

    interface UriOptions {
        /**
         * Specifies one or more acceptable Schemes, should only include the scheme name